security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: 'auto' # hashage preconise par Symfony
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory:
            memory:
                users:
                    broots:             #users 1 login : broots mdp:'toto'
                        password: '$2y$13$2dRqpJw7mw3.LddIEhn2/eC.xnK/LWDATEdIr3EDeR8d55eeWRbvG' # mdp de broots
                        roles: ['ROLE_USER']
                    parker:     # mdp:'admin'
                        password: '$2y$13$IjL87Ia4ekOc.XFkhw9h1OdeL4Z3NQCLLTZdQUgqxeT0M9piVTWDe'
                        roles: ['ROLE_ADMIN', 'ROLE_KILLER']
                    jarod: #mdp: 'qwerty'
                        password: '$2y$13$lzJq8nFCC/Py6NtWxCSnQuTpeYdZ.Uoi4maxnYShQ9dZ4vEmasTde'
                        roles: ['ROLES_SUPER_ADMIN']
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_memory #designe les users concern√©s par le firewall
            http_basic: ~  #authentification http

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER               # un admin a les droits d'un user avec les siens en plus
        ROLE_SUPER_ADMIN: [ROLE_ADMIN , ROLE_BANQUE]    # super_admin = sur-ensemble d'admin (et donc user) et de banque
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # URL "/" (et uniquement celle-la) : pas besoin d'authentification
        - { path: ^/$, roles: PUBLIC_ACCESS }
        # URLs commencant par "/sandbox" : il faut etre au moins ADMIN (donc ADMIN ou SUPER_ADMIN ici)
        - { path: ^/sandbox, roles: ROLE_ADMIN }
        # URLs commencant par "/produit/list" : il faut etre authentifie quel que soit le role
        - { path: ^/produit/list, roles: IS_AUTHENTICATED_FULLY }
        # toutes les URLs commencant par "n'importe quoi" (donc toutes les autres) : ^etre au moins USER ou KILLER
        - { path: ^/, roles: [ ROLE_USER, ROLE_KILLER ] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
